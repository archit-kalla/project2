/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "communicate.h"


void
communicate_1(char *host)
{
	CLIENT *clnt;
	bool_t  *result_1;
	Page_t  *result_2;
	int read_1_Page_num;
	int read_1_Nr;
	char * *result_3;
	bool_t  *result_4;
	Written_seqnums_t fetch_articles_1_written_seqnums;
	int  *result_5;
	Article_t write_1_Article;
	int write_1_Nw;
	char *write_1_sender_ip;
	char *write_1_sender_port;
	int  *result_6;
	bool_t  *result_7;
	Article_t server_write_1_Article;
	int  *result_8;
	Article_t  *result_9;
	int choose_1_Seqnum;

#ifndef	DEBUG
	clnt = clnt_create (host, COMMUNICATE, COMMUNICATE_VERSION, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */

	result_1 = ping_1(clnt);
	if (result_1 == (bool_t *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	result_2 = read_1(read_1_Page_num, read_1_Nr, clnt);
	if (result_2 == (Page_t *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	result_3 = get_mode_1(clnt);
	if (result_3 == (char **) NULL) {
		clnt_perror (clnt, "call failed");
	}
	result_4 = fetch_articles_1(fetch_articles_1_written_seqnums, clnt);
	if (result_4 == (bool_t *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	result_5 = write_1(write_1_Article, write_1_Nw, write_1_sender_ip, write_1_sender_port, clnt);
	if (result_5 == (int *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	result_6 = get_seqnum_1(clnt);
	if (result_6 == (int *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	result_7 = server_write_1(server_write_1_Article, clnt);
	if (result_7 == (bool_t *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	result_8 = highest_seqnum_1(clnt);
	if (result_8 == (int *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	result_9 = choose_1(choose_1_Seqnum, clnt);
	if (result_9 == (Article_t *) NULL) {
		clnt_perror (clnt, "call failed");
	}
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}


int
main (int argc, char *argv[])
{
	char *host;

	if (argc < 2) {
		printf ("usage: %s server_host\n", argv[0]);
		exit (1);
	}
	host = argv[1];
	communicate_1 (host);
exit (0);
}
