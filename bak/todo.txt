// keep track of seqnums for article posts or replies that this client has done
// So that when we switch servers during a local write,
// the server we connect to can fetch these articles

make client print work, ignore articles with seqnum 0

make server rpcs work for atleast primary backup

make client keep track of seqnums returned from writes, have written seqnums struct
send it to server upon connect if mode is local-write

add sync interrupt to server

setup sigint handler for server that calls server_shutdown

do not contact server that sent the request

make a way for the calling write server to not get contacted by the primary on a write, since it's blocked

add local write thread that contacts all servers

add Nr-1 reads, ask primary to read

primary does Nw-1 writes, since contacted server will automatically write

add interupt and fetch articles func. for qourum mode

add in the connection setup that another array with ips and ports should be created

make a read take in Nr, ip, port
make a write take in Nw, ip, port
this ip and port is used by primary, in combination with what it knows about servers, to not make a read or write to the sending server.
primary gathers all previous writes before sending them back ie page 1 should have articles with seqnums 0 .. 9 in the best case scenario, this way we get the most correct data

remake the .x file with these changes

fix client and server to work with these changes

 else if (strcmp(token, "choose") == 0){
			char *seqnum_str = strtok(NULL, " ");
			if (seqnum_str == NULL) {
				printf("choose failed, no seqnum was provided\n");
				continue;
			}

			int seqnum = atoi(seqnum_str);

			// find the article in the read page
			// note, initially all article seqnums are 0
			char *text = NULL;

			for (int i = 0; i < (sizeof(page)/ sizeof(Article_t)); i++) {
				Article_t cur = articles[i];
		
				if (cur.seqnum == Seqnum) {
					text = cur.text;
					break;
				}
			}


			// display the article

			if (text == NULL) {
				printf("Article with given seqnum was not found\n");
			} else {
				printf("%s\n", text);
			}


		}

/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "communicate.h"


void
communicate_1(char *host)
{
	CLIENT *clnt;
	bool_t  *result_1;
	Page_t  *result_2;
	int read_1_Page_num;
	char * *result_3;
	bool_t  *result_4;
	Written_seqnums_t fetch_articles_1_written_seqnums;
	int  *result_5;
	Article_t write_1_Article;
	int write_1_Nr;
	int write_1_Nw;
	int  *result_6;
	bool_t  *result_7;
	Article_t server_write_1_Article;
	int  *result_8;
	Article_t  *result_9;
	int choose_1_Seqnum;

#ifndef	DEBUG
	clnt = clnt_create (host, COMMUNICATE, COMMUNICATE_VERSION, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */

	result_1 = ping_1(clnt);
	if (result_1 == (bool_t *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	result_2 = read_1(read_1_Page_num, clnt);
	if (result_2 == (Page_t *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	result_3 = get_mode_1(clnt);
	if (result_3 == (char **) NULL) {
		clnt_perror (clnt, "call failed");
	}
	result_4 = fetch_articles_1(fetch_articles_1_written_seqnums, clnt);
	if (result_4 == (bool_t *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	result_5 = write_1(write_1_Article, write_1_Nr, write_1_Nw, clnt);
	if (result_5 == (int *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	result_6 = get_seqnum_1(clnt);
	if (result_6 == (int *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	result_7 = server_write_1(server_write_1_Article, clnt);
	if (result_7 == (bool_t *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	result_8 = highest_seqnum_1(clnt);
	if (result_8 == (int *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	result_9 = choose_1(choose_1_Seqnum, clnt);
	if (result_9 == (Article_t *) NULL) {
		clnt_perror (clnt, "call failed");
	}
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}


int
main (int argc, char *argv[])
{
	char *host;

	if (argc < 2) {
		printf ("usage: %s server_host\n", argv[0]);
		exit (1);
	}
	host = argv[1];
	communicate_1 (host);
exit (0);
}


